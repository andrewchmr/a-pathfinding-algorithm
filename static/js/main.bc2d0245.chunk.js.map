{"version":3,"sources":["serviceWorker.ts","utils.ts","config.ts","PathfindingAlgorithmView.tsx","PathfindingAlgorithmContainer.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","getLinePath","path","w","h","length","firstPoint","i","j","buffer","config","width","innerWidth","height","innerHeight","d","moveX","moveY","PathfindingAlgorithmView","grid","openSet","closedSet","Wall","fill","cx","cy","rx","ry","Spot","color","wall","x","y","props","viewBox","children","map","row","reduce","filtered","cell","push","key","strokeWidth","strokeLinecap","stroke","cols","rows","PathfindingAlgorithmContainer","useState","getInitialGrid","setGrid","setOpenSet","setClosedSet","setPath","isRunning","setRunning","getNeighbors","neighbors","Array","Math","random","f","g","previous","undefined","removeFromArray","arr","elt","splice","heuristic","a","b","abs","restartWithTimeout","setTimeout","initialGrid","getCurrentPath","current","temp","useEffect","callback","delay","savedCallback","useRef","id","setInterval","clearInterval","useInterval","newOpenSet","newClosedSet","end","winnerIndex","winner","forEach","findWinnerIndex","handleEndSuccess","neighbor","includes","tempG","newPath","checkNeighborsCells","exploreCells","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bc2d0245.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {Cell} from \"./types\";\r\n\r\nexport function getLinePath(path: Cell[], w: number, h: number): string {\r\n    if (path.length > 0) {\r\n        const firstPoint = `M${path[0].i * w + w / 2},${path[0].j * h + h / 2}`;\r\n        let buffer = ``;\r\n        for (let i = 1; i < path.length; i++) {\r\n            buffer += `L${path[i].i * w + w / 2},${path[i].j * h + h / 2}`;\r\n        }\r\n        return `${firstPoint}${buffer}`;\r\n    } else {\r\n        return '';\r\n    }\r\n}","export const config = {\r\n    cols: 30,\r\n    rows: 30,\r\n};","import React from \"react\";\r\nimport {getLinePath} from \"./utils\";\r\nimport {Cell} from \"./types\";\r\nimport {config} from \"./config\";\r\n\r\nconst width = window.innerWidth;\r\nconst height = window.innerHeight;\r\nconst cols = config.cols;\r\nconst rows = config.rows;\r\nconst d = width > height ? height : width;\r\nconst w = d / cols;\r\nconst h = d / rows;\r\nconst moveX = width > height ? -d / 2 : 0;\r\nconst moveY = width > height ? 0 : -d / 4;\r\n\r\nconst PathfindingAlgorithmView = ({grid, openSet, closedSet, path}: { grid: Cell[][], openSet: Cell[], closedSet: Cell[], path: Cell[] }) => {\r\n    const Wall = ({i, j}: { i: number, j: number }) =>\r\n        <ellipse fill={\"white\"}\r\n                 cx={i * w + w / 2}\r\n                 cy={j * h + h / 2}\r\n                 rx={w / 4}\r\n                 ry={h / 4}/>;\r\n\r\n    const Walls = () => {\r\n        return <g>{grid.map((row) => row.reduce((filtered: JSX.Element[], cell: Cell) => {\r\n            if (cell.wall) {\r\n                filtered.push(<Wall i={cell.i} j={cell.j} key={`${cell.i}-${cell.j}`}/>);\r\n            }\r\n            return filtered;\r\n        }, []))}</g>\r\n    };\r\n\r\n    const Spot = ({i, j, wall, color}: { i: number, j: number, wall: boolean, color: string }) =>\r\n        <rect x={i * w}\r\n              y={j * h}\r\n              width={w}\r\n              height={h}\r\n              fill={color}/>;\r\n\r\n\r\n    const OpenSet = () => <g>{openSet.map((cell: Cell) =>\r\n        <Spot i={cell.i}\r\n              j={cell.j}\r\n              color={'yellow'}\r\n              wall={cell.wall}\r\n              key={`${cell.i}-${cell.j}`}/>)}</g>;\r\n\r\n    const ClosedSet = () => <g>\r\n        {closedSet.map((cell: Cell) =>\r\n            <Spot i={cell.i}\r\n                  j={cell.j}\r\n                  color={'lightgrey'}\r\n                  wall={cell.wall}\r\n                  key={`${cell.i}-${cell.j}`}/>)}</g>;\r\n\r\n\r\n    const Wrapper = (props: any) => {\r\n        const viewBox = `${-width / 2 + moveX} ${-height / 2 + moveY} ${width * 2} ${height * 2}`;\r\n        return <svg viewBox={viewBox}>{props.children}</svg>\r\n    };\r\n\r\n    const Path = () => <path strokeWidth={w / 2}\r\n                             strokeLinecap=\"round\"\r\n                             d={getLinePath(path, w, h)}\r\n                             fill={'none'}\r\n                             stroke={'purple'}/>;\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Walls/>\r\n            <OpenSet/>\r\n            <ClosedSet/>\r\n            <Path/>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default PathfindingAlgorithmView;","import React, {useEffect, useRef, useState} from 'react';\r\nimport {clearInterval, setInterval} from \"timers\";\r\nimport PathfindingAlgorithmView from \"./PathfindingAlgorithmView\";\r\nimport {Cell} from \"./types\";\r\nimport {config} from \"./config\";\r\n\r\nconst cols = config.cols;\r\nconst rows = config.rows;\r\n\r\nconst PathfindingAlgorithmContainer = () => {\r\n    const [grid, setGrid] = useState<Cell[][]>(getInitialGrid());\r\n    const [openSet, setOpenSet] = useState<Cell[]>([]);\r\n    const [closedSet, setClosedSet] = useState<Cell[]>([]);\r\n    const [path, setPath] = useState<Cell[]>([]);\r\n    const [isRunning, setRunning] = useState<boolean>(true);\r\n    useEffect(() => setOpenSet([...openSet, grid[0][0]]), []);\r\n    useInterval(() => run(), isRunning ? 30 : null);\r\n\r\n    function useInterval(callback: any, delay: any) {\r\n        const savedCallback = useRef();\r\n        useEffect(() => {\r\n            savedCallback.current = callback;\r\n        }, [callback]);\r\n\r\n        useEffect(() => {\r\n            function tick() {\r\n                (savedCallback as any).current();\r\n            }\r\n\r\n            if (delay !== null) {\r\n                let id = setInterval(tick, delay);\r\n                return () => clearInterval(id);\r\n            }\r\n        }, [delay]);\r\n    }\r\n\r\n    function getNeighbors(i: number, j: number, grid: Cell[][]): Cell[] {\r\n        const neighbors = [];\r\n        if (i < cols - 1) {\r\n            neighbors.push(grid[i + 1][j]);\r\n        }\r\n        if (i > 0) {\r\n            neighbors.push(grid[i - 1][j]);\r\n        }\r\n        if (j < rows - 1) {\r\n            neighbors.push(grid[i][j + 1]);\r\n        }\r\n        if (j > 0) {\r\n            neighbors.push(grid[i][j - 1]);\r\n        }\r\n        if (i > 0 && j > 0) {\r\n            neighbors.push(grid[i - 1][j - 1]);\r\n        }\r\n        if (i < cols - 1 && j > 0) {\r\n            neighbors.push(grid[i + 1][j - 1]);\r\n        }\r\n        if (i > 0 && j < rows - 1) {\r\n            neighbors.push(grid[i - 1][j + 1]);\r\n        }\r\n        if (i < cols - 1 && j < rows - 1) {\r\n            neighbors.push(grid[i + 1][j + 1]);\r\n        }\r\n        return neighbors;\r\n    }\r\n\r\n    function getInitialGrid(): Cell[][] {\r\n        let grid: Cell[][] = [];\r\n\r\n        for (let i = 0; i < cols; i++) {\r\n            grid[i] = new Array(rows);\r\n        }\r\n\r\n        for (let i = 0; i < cols; i++) {\r\n            for (let j = 0; j < rows; j++) {\r\n                grid[i][j] = {\r\n                    i: i,\r\n                    j: j,\r\n                    wall: Math.random() < 0.4,\r\n                    f: 0,\r\n                    g: 0,\r\n                    h: 0,\r\n                    neighbors: [],\r\n                    previous: undefined\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < cols; i++) {\r\n            for (let j = 0; j < rows; j++) {\r\n                grid[i][j].neighbors = getNeighbors(i, j, grid);\r\n            }\r\n        }\r\n\r\n        grid[0][0].wall = false;\r\n        grid[cols - 1][rows - 1].wall = false;\r\n        return grid;\r\n    }\r\n\r\n    function removeFromArray(arr: Cell[], elt: Cell) {\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            if (arr[i] === elt) {\r\n                arr.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    function heuristic(a: Cell, b: Cell) {\r\n        return Math.abs(a.i - b.i) + Math.abs(a.j - b.j);\r\n    }\r\n\r\n    function restartWithTimeout() {\r\n        setRunning(false);\r\n        setTimeout(() => {\r\n            const initialGrid = getInitialGrid();\r\n            setGrid(initialGrid);\r\n            setClosedSet([]);\r\n            setOpenSet([...[], initialGrid[0][0]]);\r\n            setRunning(true);\r\n        }, 1000);\r\n    }\r\n\r\n    function findWinnerIndex(): number {\r\n        let winner = 0;\r\n        openSet.forEach((cell: Cell, i: number) => {\r\n            if (cell.f < openSet[winner].f) {\r\n                winner = i;\r\n            }\r\n        });\r\n        return winner;\r\n    }\r\n\r\n    function cellsEqual(a: Cell, b: Cell): boolean {\r\n        return a.i === b.i && a.j === b.j;\r\n    }\r\n\r\n    function handleEndSuccess(openSet: Cell[], closedSet: Cell[], current: Cell) {\r\n        removeFromArray(openSet, current);\r\n        setOpenSet(openSet);\r\n        setClosedSet([...closedSet, current]);\r\n        setPath(getCurrentPath(current));\r\n        restartWithTimeout();\r\n    }\r\n\r\n    function getCurrentPath(current: Cell): Cell[] {\r\n        const path = [];\r\n        let temp = current;\r\n        path.push(temp);\r\n        while (temp.previous) {\r\n            path.push(temp.previous);\r\n            temp = temp.previous;\r\n        }\r\n        return path;\r\n    }\r\n\r\n    function exploreCells() {\r\n        const newOpenSet = [...openSet];\r\n        const newClosedSet = [...closedSet];\r\n        const end = grid[cols - 1][rows - 1];\r\n        const winnerIndex = findWinnerIndex();\r\n        let current = newOpenSet[winnerIndex];\r\n\r\n        if (cellsEqual(current, end)) {\r\n            handleEndSuccess(newOpenSet, newClosedSet, current);\r\n            return;\r\n        }\r\n\r\n        removeFromArray(newOpenSet, current);\r\n        newClosedSet.push(current);\r\n        checkNeighborsCells(newOpenSet, newClosedSet, current, end);\r\n        setOpenSet(newOpenSet);\r\n        setClosedSet(newClosedSet);\r\n        setPath(getCurrentPath(current));\r\n    }\r\n\r\n    function checkNeighborsCells(openSet: Cell[], closedSet: Cell[], current: Cell, end: Cell) {\r\n        current.neighbors.forEach((neighbor) => {\r\n            if (!closedSet.includes(neighbor) && !neighbor.wall) {\r\n                let tempG = current.g + heuristic(neighbor, current);\r\n                let newPath = false;\r\n                if (openSet.includes(neighbor)) {\r\n                    if (tempG < neighbor.g) {\r\n                        neighbor.g = tempG;\r\n                        newPath = true;\r\n                    }\r\n                } else {\r\n                    neighbor.g = tempG;\r\n                    newPath = true;\r\n                    openSet.push(neighbor);\r\n                }\r\n\r\n                if (newPath) {\r\n                    neighbor.h = heuristic(neighbor, end);\r\n                    neighbor.f = neighbor.g + neighbor.h;\r\n                    neighbor.previous = current;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function run() {\r\n        if (grid && openSet.length > 0) {\r\n            exploreCells();\r\n        } else {\r\n            restartWithTimeout();\r\n            return;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <PathfindingAlgorithmView grid={grid} openSet={openSet} closedSet={closedSet} path={path}/>\r\n    );\r\n};\r\n\r\nexport default PathfindingAlgorithmContainer;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport PathfindingAlgorithmContainer from \"./PathfindingAlgorithmContainer\";\n\nReactDOM.render(<PathfindingAlgorithmContainer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}