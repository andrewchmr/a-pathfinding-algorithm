{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["width","window","innerWidth","height","innerHeight","cols","rows","d","w","h","moveX","moveY","App","useState","getInitialGrid","grid","setGrid","openSet","setOpenSet","closedSet","setClosedSet","path","setPath","isRunning","setRunning","getNeighbors","i","j","neighbors","push","Array","wall","Math","random","f","g","previous","undefined","removeFromArray","arr","elt","length","splice","heuristic","a","b","abs","restartWithTimeout","setTimeout","initialGrid","getCurrentPath","current","temp","getLinePath","firstPoint","buffer","useEffect","callback","delay","savedCallback","useRef","id","setInterval","clearInterval","useInterval","newOpenSet","newClosedSet","end","winnerIndex","winner","forEach","cell","findWinnerIndex","handleEndSuccess","neighbor","includes","tempG","newPath","checkNeighborsCells","exploreCells","run","Wall","fill","cx","cy","rx","ry","Spot","color","x","y","props","viewBox","children","map","row","reduce","filtered","key","strokeWidth","strokeLinecap","stroke","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.76349ef2.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\r\nimport {clearInterval, setInterval} from \"timers\";\r\n\r\nconst width = window.innerWidth;\r\nconst height = window.innerHeight;\r\nconst cols = 30;\r\nconst rows = 30;\r\nconst delay = 30;\r\nconst d = width > height ? height : width;\r\nconst w = d / cols;\r\nconst h = d / rows;\r\nconst moveX = width > height ? -d / 2 : 0;\r\nconst moveY = width > height ? 0 : -d / 4;\r\n\r\ninterface Cell {\r\n    i: number,\r\n    j: number,\r\n    wall: boolean,\r\n    f: number,\r\n    g: number,\r\n    h: number,\r\n    neighbors: Cell[],\r\n    previous: Cell | undefined\r\n}\r\n\r\nconst App = () => {\r\n    const [grid, setGrid] = useState<Cell[][]>(getInitialGrid());\r\n    const [openSet, setOpenSet] = useState<Cell[]>([]);\r\n    const [closedSet, setClosedSet] = useState<Cell[]>([]);\r\n    const [path, setPath] = useState<Cell[]>([]);\r\n    const [isRunning, setRunning] = useState<boolean>(true);\r\n    useEffect(() => setOpenSet([...openSet, grid[0][0]]), []);\r\n    useInterval(() => run(), isRunning ? delay : null);\r\n\r\n    function useInterval(callback: any, delay: any) {\r\n        const savedCallback = useRef();\r\n        useEffect(() => {\r\n            savedCallback.current = callback;\r\n        }, [callback]);\r\n\r\n        useEffect(() => {\r\n            function tick() {\r\n                (savedCallback as any).current();\r\n            }\r\n\r\n            if (delay !== null) {\r\n                let id = setInterval(tick, delay);\r\n                return () => clearInterval(id);\r\n            }\r\n        }, [delay]);\r\n    }\r\n\r\n    function getNeighbors(i: number, j: number, grid: Cell[][]): Cell[] {\r\n        const neighbors = [];\r\n        if (i < cols - 1) {\r\n            neighbors.push(grid[i + 1][j]);\r\n        }\r\n        if (i > 0) {\r\n            neighbors.push(grid[i - 1][j]);\r\n        }\r\n        if (j < rows - 1) {\r\n            neighbors.push(grid[i][j + 1]);\r\n        }\r\n        if (j > 0) {\r\n            neighbors.push(grid[i][j - 1]);\r\n        }\r\n        if (i > 0 && j > 0) {\r\n            neighbors.push(grid[i - 1][j - 1]);\r\n        }\r\n        if (i < cols - 1 && j > 0) {\r\n            neighbors.push(grid[i + 1][j - 1]);\r\n        }\r\n        if (i > 0 && j < rows - 1) {\r\n            neighbors.push(grid[i - 1][j + 1]);\r\n        }\r\n        if (i < cols - 1 && j < rows - 1) {\r\n            neighbors.push(grid[i + 1][j + 1]);\r\n        }\r\n        return neighbors;\r\n    }\r\n\r\n    function getInitialGrid(): Cell[][] {\r\n        let grid: Cell[][] = [];\r\n\r\n        for (let i = 0; i < cols; i++) {\r\n            grid[i] = new Array(rows);\r\n        }\r\n\r\n        for (let i = 0; i < cols; i++) {\r\n            for (let j = 0; j < rows; j++) {\r\n                grid[i][j] = {\r\n                    i: i,\r\n                    j: j,\r\n                    wall: Math.random() < 0.4,\r\n                    f: 0,\r\n                    g: 0,\r\n                    h: 0,\r\n                    neighbors: [],\r\n                    previous: undefined\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < cols; i++) {\r\n            for (let j = 0; j < rows; j++) {\r\n                grid[i][j].neighbors = getNeighbors(i, j, grid);\r\n            }\r\n        }\r\n\r\n        grid[0][0].wall = false;\r\n        grid[cols - 1][rows - 1].wall = false;\r\n        return grid;\r\n    }\r\n\r\n    function removeFromArray(arr: Cell[], elt: Cell) {\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            if (arr[i] === elt) {\r\n                arr.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    function heuristic(a: Cell, b: Cell) {\r\n        return Math.abs(a.i - b.i) + Math.abs(a.j - b.j);\r\n    }\r\n\r\n    function restartWithTimeout() {\r\n        setRunning(false);\r\n        setTimeout(() => {\r\n            const initialGrid = getInitialGrid();\r\n            setGrid(initialGrid);\r\n            setClosedSet([]);\r\n            setOpenSet([...[], initialGrid[0][0]]);\r\n            setRunning(true);\r\n        }, 1000);\r\n    }\r\n\r\n    function findWinnerIndex(): number {\r\n        let winner = 0;\r\n        openSet.forEach((cell: Cell, i: number) => {\r\n            if (cell.f < openSet[winner].f) {\r\n                winner = i;\r\n            }\r\n        });\r\n        return winner;\r\n    }\r\n\r\n    function cellsEqual(a: Cell, b: Cell): boolean {\r\n        return a.i === b.i && a.j === b.j;\r\n    }\r\n\r\n    function handleEndSuccess(openSet: Cell[], closedSet: Cell[], current: Cell) {\r\n        removeFromArray(openSet, current);\r\n        setOpenSet(openSet);\r\n        setClosedSet([...closedSet, current]);\r\n        setPath(getCurrentPath(current));\r\n        restartWithTimeout();\r\n    }\r\n\r\n    function getCurrentPath(current: Cell): Cell[] {\r\n        const path = [];\r\n        let temp = current;\r\n        path.push(temp);\r\n        while (temp.previous) {\r\n            path.push(temp.previous);\r\n            temp = temp.previous;\r\n        }\r\n        return path;\r\n    }\r\n\r\n    function exploreCells() {\r\n        const newOpenSet = [...openSet];\r\n        const newClosedSet = [...closedSet];\r\n        const end = grid[cols - 1][rows - 1];\r\n        const winnerIndex = findWinnerIndex();\r\n        let current = newOpenSet[winnerIndex];\r\n\r\n        if (cellsEqual(current, end)) {\r\n            handleEndSuccess(newOpenSet, newClosedSet, current);\r\n            return;\r\n        }\r\n\r\n        removeFromArray(newOpenSet, current);\r\n        newClosedSet.push(current);\r\n        checkNeighborsCells(newOpenSet, newClosedSet, current, end);\r\n        setOpenSet(newOpenSet);\r\n        setClosedSet(newClosedSet);\r\n        setPath(getCurrentPath(current));\r\n    }\r\n\r\n    function getLinePath(path: Cell[]): string {\r\n        if (path.length > 0) {\r\n            const firstPoint = `M${path[0].i * w + w / 2},${path[0].j * h + h / 2}`;\r\n            let buffer = ``;\r\n            for (let i = 1; i < path.length; i++) {\r\n                buffer += `L${path[i].i * w + w / 2},${path[i].j * h + h / 2}`;\r\n            }\r\n            return `${firstPoint}${buffer}`;\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    function checkNeighborsCells(openSet: Cell[], closedSet: Cell[], current: Cell, end: Cell) {\r\n        current.neighbors.forEach((neighbor) => {\r\n            if (!closedSet.includes(neighbor) && !neighbor.wall) {\r\n                let tempG = current.g + heuristic(neighbor, current);\r\n                let newPath = false;\r\n                if (openSet.includes(neighbor)) {\r\n                    if (tempG < neighbor.g) {\r\n                        neighbor.g = tempG;\r\n                        newPath = true;\r\n                    }\r\n                } else {\r\n                    neighbor.g = tempG;\r\n                    newPath = true;\r\n                    openSet.push(neighbor);\r\n                }\r\n\r\n                if (newPath) {\r\n                    neighbor.h = heuristic(neighbor, end);\r\n                    neighbor.f = neighbor.g + neighbor.h;\r\n                    neighbor.previous = current;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function run() {\r\n        if (grid && openSet.length > 0) {\r\n            exploreCells();\r\n        } else {\r\n            restartWithTimeout();\r\n            return;\r\n        }\r\n    }\r\n\r\n    const Wall = ({i, j}: { i: number, j: number }) =>\r\n        <ellipse fill={\"white\"}\r\n                 cx={i * w + w / 2}\r\n                 cy={j * h + h / 2}\r\n                 rx={w / 4}\r\n                 ry={h / 4}/>;\r\n\r\n    const Walls = () => {\r\n        return <g>{grid.map((row) => row.reduce((filtered: JSX.Element[], cell: Cell) => {\r\n            if (cell.wall) {\r\n                filtered.push(<Wall i={cell.i} j={cell.j} key={`${cell.i}-${cell.j}`}/>);\r\n            }\r\n            return filtered;\r\n        }, []))}</g>\r\n    };\r\n\r\n    const Spot = ({i, j, wall, color}: { i: number, j: number, wall: boolean, color: string }) =>\r\n        <rect x={i * w}\r\n              y={j * h}\r\n              width={w}\r\n              height={h}\r\n              fill={color}/>;\r\n\r\n\r\n    const OpenSet = () => <g>{openSet.map((cell: Cell) =>\r\n        <Spot i={cell.i}\r\n              j={cell.j}\r\n              color={'yellow'}\r\n              wall={cell.wall}\r\n              key={`${cell.i}-${cell.j}`}/>)}</g>;\r\n\r\n    const ClosedSet = () => <g>\r\n        {closedSet.map((cell: Cell) =>\r\n            <Spot i={cell.i}\r\n                  j={cell.j}\r\n                  color={'lightgrey'}\r\n                  wall={cell.wall}\r\n                  key={`${cell.i}-${cell.j}`}/>)}</g>;\r\n\r\n\r\n    const Wrapper = (props: any) => <svg\r\n        viewBox={`${-width / 2 + moveX} ${-height / 2 + moveY} ${width * 2} ${height * 2}`}>{props.children}</svg>;\r\n\r\n    const Path = () => <path strokeWidth={w / 2} strokeLinecap=\"round\" d={getLinePath(path)} fill={'none'}\r\n                             stroke={'purple'}/>;\r\n\r\n    return (\r\n        <Wrapper>\r\n            <Walls/>\r\n            <OpenSet/>\r\n            <ClosedSet/>\r\n            <Path/>\r\n        </Wrapper>\r\n    );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}