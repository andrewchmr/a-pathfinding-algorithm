{"version":3,"sources":["serviceWorker.ts","config.ts","components/PathfindingAlgorithm/Path/Path.tsx","components/PathfindingAlgorithm/SvgWrapper/SvgWrapper.tsx","components/PathfindingAlgorithm/Set/Spot/Spot.tsx","components/PathfindingAlgorithm/Set/Set.tsx","components/PathfindingAlgorithm/Walls/Wall/Wall.tsx","components/PathfindingAlgorithm/Walls/Walls.tsx","components/PathfindingAlgorithm/PathfindingAlgorithm.tsx","containers/PathfindingAlgorithm/PathfindingAlgorithmContainer.tsx","hooks/useInterval.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","config","Path","path","strokeWidth","w","strokeLinecap","d","h","length","firstPoint","i","j","buffer","getLinePath","fill","stroke","SvgWrapper","props","viewBox","width","moveX","height","moveY","children","Spot","color","x","y","Set","cells","map","cell","key","Wall","cx","cy","rx","ry","Walls","grid","row","filter","wall","innerWidth","innerHeight","PathfindingAlgorithm","openSet","closedSet","cols","rows","PathfindingAlgorithmContainer","useState","getInitialGrid","setGrid","setOpenSet","setClosedSet","setPath","isRunning","setRunning","getNeighbors","neighbors","push","Array","Math","random","f","g","previous","undefined","removeFromArray","arr","elt","splice","heuristic","a","b","abs","restartWithTimeout","setTimeout","initialGrid","getCurrentPath","current","temp","callback","delay","savedCallback","useRef","useEffect","id","setInterval","clearInterval","useInterval","newOpenSet","newClosedSet","end","winnerIndex","winner","forEach","findWinnerIndex","handleEndSuccess","neighbor","includes","tempG","newPath","checkNeighborsCells","exploreCells","run","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f357e5f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const config = {\r\n    cols: 30,\r\n    rows: 30,\r\n};","import React from \"react\";\r\nimport {Cell} from \"../../../types\";\r\nimport {h, w} from \"../PathfindingAlgorithm\";\r\n\r\ninterface PathProps {\r\n    path: Cell[]\r\n}\r\n\r\nexport const Path = ({path}: PathProps) => {\r\n\r\n    const getLinePath = (path: Cell[], w: number, h: number): string => {\r\n        if (path.length > 0) {\r\n            const firstPoint = `M${path[0].i * w + w / 2},${path[0].j * h + h / 2}`;\r\n            let buffer = ``;\r\n            for (let i = 1; i < path.length; i++) {\r\n                buffer += `L${path[i].i * w + w / 2},${path[i].j * h + h / 2}`;\r\n            }\r\n            return `${firstPoint}${buffer}`;\r\n        } else {\r\n            return '';\r\n        }\r\n    };\r\n\r\n    return <path strokeWidth={w / 2}\r\n                 strokeLinecap=\"round\"\r\n                 d={getLinePath(path, w, h)}\r\n                 fill={'none'}\r\n                 stroke={'purple'}/>\r\n};","import React from \"react\";\r\nimport {height, moveX, moveY, width} from \"../PathfindingAlgorithm\";\r\n\r\nexport const SvgWrapper = (props: any) => {\r\n    const viewBox = `${-width / 2 + moveX} ${-height / 2 + moveY} ${width * 2} ${height * 2}`;\r\n    return <svg viewBox={viewBox}>{props.children}</svg>\r\n};","import React from \"react\";\r\nimport {h, w} from \"../../PathfindingAlgorithm\";\r\n\r\ninterface SpotProps {\r\n    i: number,\r\n    j: number,\r\n    color: string\r\n}\r\n\r\nexport const Spot = ({i, j, color}: SpotProps) => {\r\n    return <rect x={i * w}\r\n                 y={j * h}\r\n                 width={w}\r\n                 height={h}\r\n                 fill={color}/>\r\n};","import {Cell} from \"../../../types\";\r\nimport {Spot} from \"./Spot/Spot\";\r\nimport React from \"react\";\r\n\r\ninterface SetProps {\r\n    cells: Cell[],\r\n    color: string\r\n}\r\n\r\nexport const Set = ({cells, color}: SetProps) => {\r\n    return <g>{cells.map((cell: Cell) =>\r\n        <Spot i={cell.i}\r\n              j={cell.j}\r\n              color={color}\r\n              key={`${cell.i}-${cell.j}`}/>)}</g>\r\n};","import React from \"react\";\r\nimport {h, w} from \"../../PathfindingAlgorithm\";\r\n\r\nexport const Wall = ({i, j}: { i: number, j: number }) => {\r\n    return <ellipse fill={\"white\"}\r\n                    cx={i * w + w / 2}\r\n                    cy={j * h + h / 2}\r\n                    rx={w / 4}\r\n                    ry={h / 4}/>\r\n};","import {Cell} from \"../../../types\";\r\nimport {Wall} from \"./Wall/Wall\";\r\nimport React from \"react\";\r\n\r\ninterface WallsProps {\r\n    grid: Cell[][]\r\n}\r\n\r\nexport const Walls = ({grid}: WallsProps) => {\r\n    return <g>{grid.map((row: Cell[]) => {\r\n        return row.filter(cell => cell.wall)\r\n            .map(cell => <Wall i={cell.i}\r\n                               j={cell.j}\r\n                               key={`${cell.i}-${cell.j}`}/>)\r\n    })}\r\n    </g>\r\n};","import React from \"react\";\r\nimport {Cell} from \"../../types\";\r\nimport {config} from \"../../config\";\r\nimport {Path} from \"./Path/Path\";\r\nimport {SvgWrapper} from \"./SvgWrapper/SvgWrapper\";\r\nimport {Set} from \"./Set/Set\";\r\nimport {Walls} from \"./Walls/Walls\";\r\n\r\nexport const width = window.innerWidth;\r\nexport const height = window.innerHeight;\r\nconst cols = config.cols;\r\nconst rows = config.rows;\r\nexport const d = width > height ? height : width;\r\nexport const w = d / cols;\r\nexport const h = d / rows;\r\nexport const moveX = width > height ? -d / 2 : 0;\r\nexport const moveY = width > height ? 0 : -d / 4;\r\n\r\ninterface PathfindingAlgorithmProps {\r\n    grid: Cell[][],\r\n    openSet: Cell[],\r\n    closedSet: Cell[],\r\n    path: Cell[]\r\n}\r\n\r\nconst PathfindingAlgorithm = ({grid, openSet, closedSet, path}: PathfindingAlgorithmProps) => {\r\n    return (\r\n        <SvgWrapper>\r\n            <Walls grid={grid}/>\r\n            <Set cells={openSet} color={'yellow'}/>\r\n            <Set cells={closedSet} color={'lightgrey'}/>\r\n            <Path path={path}/>\r\n        </SvgWrapper>\r\n    );\r\n};\r\n\r\nexport default PathfindingAlgorithm;","import React, {useState} from 'react';\r\nimport PathfindingAlgorithm from \"../../components/PathfindingAlgorithm/PathfindingAlgorithm\";\r\nimport {Cell} from \"../../types\";\r\nimport {config} from \"../../config\";\r\nimport {useInterval} from \"../../hooks/useInterval\";\r\n\r\nconst cols = config.cols;\r\nconst rows = config.rows;\r\n\r\nconst PathfindingAlgorithmContainer = () => {\r\n    const [grid, setGrid] = useState<Cell[][]>(getInitialGrid());\r\n    const [openSet, setOpenSet] = useState<Cell[]>([grid[0][0]]);\r\n    const [closedSet, setClosedSet] = useState<Cell[]>([]);\r\n    const [path, setPath] = useState<Cell[]>([]);\r\n    const [isRunning, setRunning] = useState<boolean>(true);\r\n    useInterval(() => run(), isRunning ? 30 : null);\r\n\r\n    function getNeighbors(i: number, j: number, grid: Cell[][]): Cell[] {\r\n        const neighbors = [];\r\n        if (i < cols - 1) {\r\n            neighbors.push(grid[i + 1][j]);\r\n        }\r\n        if (i > 0) {\r\n            neighbors.push(grid[i - 1][j]);\r\n        }\r\n        if (j < rows - 1) {\r\n            neighbors.push(grid[i][j + 1]);\r\n        }\r\n        if (j > 0) {\r\n            neighbors.push(grid[i][j - 1]);\r\n        }\r\n        if (i > 0 && j > 0) {\r\n            neighbors.push(grid[i - 1][j - 1]);\r\n        }\r\n        if (i < cols - 1 && j > 0) {\r\n            neighbors.push(grid[i + 1][j - 1]);\r\n        }\r\n        if (i > 0 && j < rows - 1) {\r\n            neighbors.push(grid[i - 1][j + 1]);\r\n        }\r\n        if (i < cols - 1 && j < rows - 1) {\r\n            neighbors.push(grid[i + 1][j + 1]);\r\n        }\r\n        return neighbors;\r\n    }\r\n\r\n    function getInitialGrid(): Cell[][] {\r\n        let grid: Cell[][] = [];\r\n\r\n        for (let i = 0; i < cols; i++) {\r\n            grid[i] = new Array(rows);\r\n        }\r\n\r\n        for (let i = 0; i < cols; i++) {\r\n            for (let j = 0; j < rows; j++) {\r\n                grid[i][j] = {\r\n                    i: i,\r\n                    j: j,\r\n                    wall: Math.random() < 0.4,\r\n                    f: 0,\r\n                    g: 0,\r\n                    h: 0,\r\n                    neighbors: [],\r\n                    previous: undefined\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = 0; i < cols; i++) {\r\n            for (let j = 0; j < rows; j++) {\r\n                grid[i][j].neighbors = getNeighbors(i, j, grid);\r\n            }\r\n        }\r\n\r\n        grid[0][0].wall = false;\r\n        grid[cols - 1][rows - 1].wall = false;\r\n        return grid;\r\n    }\r\n\r\n    function removeFromArray(arr: Cell[], elt: Cell) {\r\n        for (let i = arr.length - 1; i >= 0; i--) {\r\n            if (arr[i] === elt) {\r\n                arr.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    function heuristic(a: Cell, b: Cell) {\r\n        return Math.abs(a.i - b.i) + Math.abs(a.j - b.j);\r\n    }\r\n\r\n    function restartWithTimeout() {\r\n        setRunning(false);\r\n        setTimeout(() => {\r\n            const initialGrid = getInitialGrid();\r\n            setGrid(initialGrid);\r\n            setClosedSet([]);\r\n            setOpenSet([...[], initialGrid[0][0]]);\r\n            setRunning(true);\r\n        }, 1000);\r\n    }\r\n\r\n    function findWinnerIndex(): number {\r\n        let winner = 0;\r\n        openSet.forEach((cell: Cell, i: number) => {\r\n            if (cell.f < openSet[winner].f) {\r\n                winner = i;\r\n            }\r\n        });\r\n        return winner;\r\n    }\r\n\r\n    function cellsEqual(a: Cell, b: Cell): boolean {\r\n        return a.i === b.i && a.j === b.j;\r\n    }\r\n\r\n    function handleEndSuccess(openSet: Cell[], closedSet: Cell[], current: Cell) {\r\n        removeFromArray(openSet, current);\r\n        setOpenSet(openSet);\r\n        setClosedSet([...closedSet, current]);\r\n        setPath(getCurrentPath(current));\r\n        restartWithTimeout();\r\n    }\r\n\r\n    function getCurrentPath(current: Cell): Cell[] {\r\n        const path = [];\r\n        let temp = current;\r\n        path.push(temp);\r\n        while (temp.previous) {\r\n            path.push(temp.previous);\r\n            temp = temp.previous;\r\n        }\r\n        return path;\r\n    }\r\n\r\n    function exploreCells() {\r\n        const newOpenSet = [...openSet];\r\n        const newClosedSet = [...closedSet];\r\n        const end = grid[cols - 1][rows - 1];\r\n        const winnerIndex = findWinnerIndex();\r\n        let current = newOpenSet[winnerIndex];\r\n\r\n        if (cellsEqual(current, end)) {\r\n            handleEndSuccess(newOpenSet, newClosedSet, current);\r\n            return;\r\n        }\r\n\r\n        removeFromArray(newOpenSet, current);\r\n        newClosedSet.push(current);\r\n        checkNeighborsCells(newOpenSet, newClosedSet, current, end);\r\n        setOpenSet(newOpenSet);\r\n        setClosedSet(newClosedSet);\r\n        setPath(getCurrentPath(current));\r\n    }\r\n\r\n    function checkNeighborsCells(openSet: Cell[], closedSet: Cell[], current: Cell, end: Cell) {\r\n        current.neighbors.forEach((neighbor) => {\r\n            if (!closedSet.includes(neighbor) && !neighbor.wall) {\r\n                let tempG = current.g + heuristic(neighbor, current);\r\n                let newPath = false;\r\n                if (openSet.includes(neighbor)) {\r\n                    if (tempG < neighbor.g) {\r\n                        neighbor.g = tempG;\r\n                        newPath = true;\r\n                    }\r\n                } else {\r\n                    neighbor.g = tempG;\r\n                    newPath = true;\r\n                    openSet.push(neighbor);\r\n                }\r\n\r\n                if (newPath) {\r\n                    neighbor.h = heuristic(neighbor, end);\r\n                    neighbor.f = neighbor.g + neighbor.h;\r\n                    neighbor.previous = current;\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    function run() {\r\n        if (grid && openSet.length > 0) {\r\n            exploreCells();\r\n        } else {\r\n            restartWithTimeout();\r\n            return;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <PathfindingAlgorithm grid={grid} openSet={openSet} closedSet={closedSet} path={path}/>\r\n    );\r\n};\r\n\r\nexport default PathfindingAlgorithmContainer;\r\n","import {useEffect, useRef} from \"react\";\r\nimport {clearInterval, setInterval} from \"timers\";\r\n\r\nexport const useInterval = (callback: any, delay: number | null) => {\r\n    const savedCallback = useRef();\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n\r\n    useEffect(() => {\r\n        const tick = () => {\r\n            (savedCallback as any).current();\r\n        };\r\n\r\n        if (delay !== null) {\r\n            let id = setInterval(tick, delay);\r\n            return () => clearInterval(id);\r\n        }\r\n    }, [delay]);\r\n};","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport PathfindingAlgorithmContainer from \"./containers/PathfindingAlgorithm/PathfindingAlgorithmContainer\";\r\n\r\nReactDOM.render(<PathfindingAlgorithmContainer />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}